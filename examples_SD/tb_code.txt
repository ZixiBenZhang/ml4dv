# Copyright Zixi Zhang
# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

import functools
import zmq
import pickle
from contextlib import closing
from stride_detector.shared_types import *

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import Timer, ClockCycles, ReadWrite, ReadOnly, Event


NO_STRIDE = 0
SINGLE_STRIDE = 1
DOUBLE_STRIDE = 2


class CoverageMonitor:
    def __init__(self, dut):
        self.coverage_database = CoverageDatabase()

        self.coverage_database.stride_1_seen = [0] * NUM_STRIDES
        self.coverage_database.stride_2_seen = []

        for i in range(NUM_STRIDES):
            self.coverage_database.stride_2_seen.append([0] * NUM_STRIDES)

        self.signals = {
                'clk'   : dut.clk_i,
                'valid' : dut.valid_i,
                'value' : dut.value_i,
                'stride_1' : dut.stride_1_o,
                'stride_1_valid' : dut.stride_1_valid_o,
                'stride_2' : dut.stride_2_o,
                'stride_2_valid' : dut.stride_2_valid_o,
        }

        self.coverage_database.misc_bins = {
                'single_stride_n_overflow' : 0,
                'single_stride_p_overflow' : 0,
                'double_stride_nn_overflow' : 0,
                'double_stride_np_overflow' : 0,
                'double_stride_pn_overflow' : 0,
                'double_stride_pp_overflow' : 0,
                'no_stride_to_double' : 0,
                'no_stride_to_single' : 0,
                'single_stride_to_double' : 0,
                'double_stride_to_single' : 0,
        }

        self.stride_state = NO_STRIDE
        self.no_strides_count = 0

        self.last_values = []

        self.coverage_sampled_event = Event()

    def sample_coverage(self):
        if self.signals['valid'].value:
            self.last_values.append(int(self.signals['value'].value))

            if len(self.last_values) > 16:
                self.last_values = self.last_values[-16:]

        if self.signals['stride_1_valid'].value:
            if self.signals['stride_2_valid'].value:
                self.coverage_database.stride_2_seen[self.signals['stride_1'].value][self.signals['stride_2'].value] += 1
            else:
                self.coverage_database.stride_1_seen[self.signals['stride_1'].value] += 1

        self.check_latest_strides()
        self.coverage_sampled_event.set()

    def sample_single_stride_coverage(self, single_stride):
        no_stride = True

        if single_stride < STRIDE_MIN:
            self.coverage_database.misc_bins['single_stride_n_overflow'] += 1
        elif single_stride > STRIDE_MAX:
            self.coverage_database.misc_bins['single_stride_p_overflow'] += 1
        else:
            no_stride = False

            if self.stride_state == NO_STRIDE:
                self.coverage_database.misc_bins['no_stride_to_single'] += 1
            elif self.stride_state == DOUBLE_STRIDE:
                self.coverage_database.misc_bins['double_stride_to_single'] += 1

            self.stride_state = SINGLE_STRIDE
            self.no_strides_count = 0

        if no_stride:
            self.no_strides_count += 1

    def sample_double_stride_coverage(self, first_stride, second_stride):
        no_stride = True

        if first_stride < STRIDE_MIN and second_stride < STRIDE_MIN:
            self.coverage_database.misc_bins['double_stride_nn_overflow'] += 1
        if first_stride < STRIDE_MIN and second_stride > STRIDE_MAX:
            self.coverage_database.misc_bins['double_stride_np_overflow'] += 1
        if first_stride > STRIDE_MAX and second_stride < STRIDE_MIN:
            self.coverage_database.misc_bins['double_stride_pn_overflow'] += 1
        if first_stride > STRIDE_MAX and second_stride > STRIDE_MAX:
            self.coverage_database.misc_bins['double_stride_pp_overflow'] += 1
        else:
            no_stride = False
            if self.stride_state == NO_STRIDE:
                self.coverage_database.misc_bins['no_stride_to_double'] += 1
            elif self.stride_state == SINGLE_STRIDE:
                self.coverage_database.misc_bins['single_stride_to_double'] += 1

            self.stride_state = DOUBLE_STRIDE
            self.no_strides_count = 0

        if no_stride:
            self.no_strides_count += 1

    def check_latest_strides(self):
        if (len(self.last_values) < 16):
            return

        value_pairs = list(zip(self.last_values, [None] + self.last_values))
        strides = list(map(lambda x: x[0] - x[1], value_pairs[1:]))

        stride_set = set(strides)
        if len(stride_set) == 1:
            self.sample_single_stride_coverage(next(iter(stride_set)))
        elif len(stride_set) == 2:
            first_strides = [s for (i, s) in enumerate(strides) if i % 2 == 0]
            second_strides = [s for (i, s) in enumerate(strides) if i % 2 == 1]

            first_stride_set = set(first_strides)
            second_stride_set = set(second_strides)

            if len(first_stride_set) == 1 and len(second_stride_set) == 1:
                self.sample_double_stride_coverage(next(iter(first_stride_set)),
                        next(iter(second_stride_set)))
            else:
                self.no_strides_count += 1
        else:
            self.no_strides_count += 1

        if self.no_strides_count > 16:
            self.stride_state = NO_STRIDE
